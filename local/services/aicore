#!/bin/bash

# aicore - ADK API Server Service Management Script
# Manages ADK API Server instances as systemd services

set -euo pipefail

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
TEMPLATE_FILE="$SCRIPT_DIR/aicore-service.template"
SYSTEMD_DIR="/etc/systemd/system"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Print colored output
print_error() {
    echo -e "${RED}Error: $1${NC}" >&2
}

print_success() {
    echo -e "${GREEN}Success: $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}Warning: $1${NC}"
}

print_info() {
    echo -e "${BLUE}Info: $1${NC}"
}

# Usage information
show_help() {
    cat << EOF
AICore Service Management

A systemd service management system for ADK API Server instances.

USAGE:
    aicore <command> [options]

COMMANDS:
    start     Start a service
    stop      Stop a service
    status    Check service status
    restart   Restart a service
    logs      View service logs (follow mode)
    --help    Show this help message

OPTIONS:
    --project <path>    Path to the project directory (required for all commands)
    --port <port>       Port number for the service (required for start command)

EXAMPLES:
    # Start ai_core_brandon on port 8004
    aicore start --project /home/vaden/dev/projects/live/ai_core_brandon --port 8004

    # Stop ai_core_leif
    aicore stop --project /home/vaden/dev/projects/live/ai_core_leif

    # Check status of ai_core_brandon
    aicore status --project /home/vaden/dev/projects/live/ai_core_brandon

    # View logs for ai_core_leif
    aicore logs --project /home/vaden/dev/projects/live/ai_core_leif

REQUIREMENTS:
    - Systemd-based Linux distribution
    - Virtual environment with .venv directory in each project
    - ADK command installed in the project's virtual environment
    - Sudo privileges for systemctl operations

For more information, see the README.md file.
EOF
}

# Validate port number
validate_port() {
    local port="$1"
    
    # Check if port is a number
    if ! [[ "$port" =~ ^[0-9]+$ ]]; then
        print_error "Port must be a number, got: $port"
        return 1
    fi
    
    # Check port range
    if [[ "$port" -lt 1 || "$port" -gt 65535 ]]; then
        print_error "Port must be between 1 and 65535, got: $port"
        return 1
    fi
    
    return 0
}

# Validate project directory
validate_project() {
    local project_path="$1"
    
    # Check if project directory exists
    if [[ ! -d "$project_path" ]]; then
        print_error "Project directory does not exist: $project_path"
        return 1
    fi
    
    # Check if .venv directory exists
    if [[ ! -d "$project_path/.venv" ]]; then
        print_error "Virtual environment not found: $project_path/.venv"
        print_info "Create one with: cd '$project_path' && python -m venv .venv"
        return 1
    fi
    
    # Check if adk command exists in virtual environment
    local adk_path="$project_path/.venv/bin/adk"
    if [[ ! -f "$adk_path" ]]; then
        print_error "ADK command not found in virtual environment: $adk_path"
        print_info "Install with: cd '$project_path' && source .venv/bin/activate && pip install adk"
        return 1
    fi
    
    return 0
}

# Get service name from project path
get_service_name() {
    local project_path="$1"
    local project_name
    project_name=$(basename "$project_path")
    echo "aicore-$project_name"
}

# Generate service file from template
generate_service_file() {
    local project_path="$1"
    local port="$2"
    local service_name="$3"
    local service_file="$SCRIPT_DIR/$service_name.service"
    
    # Check if template exists
    if [[ ! -f "$TEMPLATE_FILE" ]]; then
        print_error "Service template not found: $TEMPLATE_FILE"
        return 1
    fi
    
    # Get absolute path
    local abs_project_path
    abs_project_path=$(realpath "$project_path")
    
    # Get virtual environment path
    local venv_path="$abs_project_path/.venv"
    
    # Get current user
    local current_user
    current_user=$(whoami)
    
    # Get project name
    local project_name
    project_name=$(basename "$abs_project_path")
    
    # Generate service file
    sed -e "s|{PROJECT_PATH}|$abs_project_path|g" \
        -e "s|{VENV_PATH}|$venv_path|g" \
        -e "s|{PORT}|$port|g" \
        -e "s|{USER}|$current_user|g" \
        -e "s|{PROJECT_NAME}|$project_name|g" \
        "$TEMPLATE_FILE" > "$service_file"
    
    echo "$service_file"
}

# Copy service file to systemd directory
install_service_file() {
    local service_file="$1"
    local service_name="$2"
    local systemd_service_file="$SYSTEMD_DIR/$service_name.service"
    
    # Copy to systemd directory
    if ! sudo cp "$service_file" "$systemd_service_file"; then
        print_error "Failed to copy service file to systemd directory"
        return 1
    fi
    
    # Set proper permissions
    sudo chmod 644 "$systemd_service_file"
    
    # Reload systemd daemon
    if ! sudo systemctl daemon-reload; then
        print_error "Failed to reload systemd daemon"
        return 1
    fi
    
    return 0
}

# Remove service file from systemd directory
remove_service_file() {
    local service_name="$1"
    local systemd_service_file="$SYSTEMD_DIR/$service_name.service"
    local local_service_file="$SCRIPT_DIR/$service_name.service"
    
    # Remove from systemd directory
    if [[ -f "$systemd_service_file" ]]; then
        if ! sudo rm "$systemd_service_file"; then
            print_warning "Failed to remove service file from systemd directory: $systemd_service_file"
        fi
    fi
    
    # Remove local service file
    if [[ -f "$local_service_file" ]]; then
        if ! rm "$local_service_file"; then
            print_warning "Failed to remove local service file: $local_service_file"
        fi
    fi
    
    # Reload systemd daemon
    if ! sudo systemctl daemon-reload; then
        print_warning "Failed to reload systemd daemon"
    fi
}

# Start service
start_service() {
    local project_path="$1"
    local port="$2"
    
    # Validate inputs
    if ! validate_project "$project_path"; then
        return 1
    fi
    
    if ! validate_port "$port"; then
        return 1
    fi
    
    local service_name
    service_name=$(get_service_name "$project_path")
    
    # Check if service is already running
    if systemctl is-active --quiet "$service_name" 2>/dev/null; then
        print_warning "Service $service_name is already running"
        return 0
    fi
    
    # Generate service file
    local service_file
    if ! service_file=$(generate_service_file "$project_path" "$port" "$service_name"); then
        return 1
    fi
    
    # Install service file
    if ! install_service_file "$service_file" "$service_name"; then
        return 1
    fi
    
    # Enable and start service
    if ! sudo systemctl enable "$service_name"; then
        print_error "Failed to enable service: $service_name"
        return 1
    fi
    
    if ! sudo systemctl start "$service_name"; then
        print_error "Failed to start service: $service_name"
        return 1
    fi
    
    print_success "Service $service_name started successfully"
    print_info "Project: $project_path"
    print_info "Port: $port"
    print_info "View logs with: aicore logs --project '$project_path'"
    
    return 0
}

# Stop service
stop_service() {
    local project_path="$1"
    
    # Only validate that project path exists for service name generation
    if [[ ! -d "$project_path" ]]; then
        print_error "Project directory does not exist: $project_path"
        return 1
    fi
    
    local service_name
    service_name=$(get_service_name "$project_path")
    
    # Check if service exists
    if ! systemctl list-unit-files | grep -q "^$service_name.service"; then
        print_warning "Service $service_name does not exist"
        return 0
    fi
    
    # Stop service
    if ! sudo systemctl stop "$service_name"; then
        print_error "Failed to stop service: $service_name"
        return 1
    fi
    
    # Disable service
    if ! sudo systemctl disable "$service_name"; then
        print_error "Failed to disable service: $service_name"
        return 1
    fi
    
    # Remove service files
    remove_service_file "$service_name"
    
    print_success "Service $service_name stopped and removed"
    
    return 0
}

# Check service status
check_status() {
    local project_path="$1"
    
    # Only validate that project path exists for service name generation
    if [[ ! -d "$project_path" ]]; then
        print_error "Project directory does not exist: $project_path"
        return 1
    fi
    
    local service_name
    service_name=$(get_service_name "$project_path")
    
    # Check if service exists
    if ! systemctl list-unit-files | grep -q "^$service_name.service"; then
        print_info "Service $service_name does not exist"
        return 0
    fi
    
    # Show service status
    sudo systemctl status "$service_name" --no-pager
    
    return 0
}

# Restart service
restart_service() {
    local project_path="$1"
    
    # Validate project
    if ! validate_project "$project_path"; then
        return 1
    fi
    
    local service_name
    service_name=$(get_service_name "$project_path")
    
    # Check if service exists
    if ! systemctl list-unit-files | grep -q "^$service_name.service"; then
        print_error "Service $service_name does not exist. Use 'start' command first."
        return 1
    fi
    
    # Restart service
    if ! sudo systemctl restart "$service_name"; then
        print_error "Failed to restart service: $service_name"
        return 1
    fi
    
    print_success "Service $service_name restarted successfully"
    
    return 0
}

# View service logs
view_logs() {
    local project_path="$1"
    
    # Validate project
    if ! validate_project "$project_path"; then
        return 1
    fi
    
    local service_name
    service_name=$(get_service_name "$project_path")
    
    # Check if service exists
    if ! systemctl list-unit-files | grep -q "^$service_name.service"; then
        print_error "Service $service_name does not exist"
        return 1
    fi
    
    # View logs in follow mode
    print_info "Viewing logs for $service_name (Press Ctrl+C to exit)"
    journalctl -u "$service_name" -f --no-pager
    
    return 0
}

# Parse command line arguments
parse_args() {
    local command=""
    local project_path=""
    local port=""
    
    # Check if no arguments provided
    if [[ $# -eq 0 ]]; then
        show_help
        return 1
    fi
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            start|stop|status|restart|logs)
                command="$1"
                shift
                ;;
            --help|-h)
                show_help
                return 0
                ;;
            --project)
                if [[ $# -lt 2 ]]; then
                    print_error "Option --project requires a value"
                    return 1
                fi
                project_path="$2"
                shift 2
                ;;
            --port)
                if [[ $# -lt 2 ]]; then
                    print_error "Option --port requires a value"
                    return 1
                fi
                port="$2"
                shift 2
                ;;
            *)
                print_error "Unknown option: $1"
                show_help
                return 1
                ;;
        esac
    done
    
    # Validate command
    if [[ -z "$command" ]]; then
        print_error "No command specified"
        show_help
        return 1
    fi
    
    # Validate project path
    if [[ -z "$project_path" ]]; then
        print_error "Project path is required (use --project <path>)"
        return 1
    fi
    
    # Validate port for start command
    if [[ "$command" == "start" && -z "$port" ]]; then
        print_error "Port is required for start command (use --port <port>)"
        return 1
    fi
    
    # Execute command
    case "$command" in
        start)
            start_service "$project_path" "$port"
            ;;
        stop)
            stop_service "$project_path"
            ;;
        status)
            check_status "$project_path"
            ;;
        restart)
            restart_service "$project_path"
            ;;
        logs)
            view_logs "$project_path"
            ;;
        *)
            print_error "Unknown command: $command"
            return 1
            ;;
    esac
}

# Check prerequisites
check_prerequisites() {
    # Check if systemctl is available
    if ! command -v systemctl &> /dev/null; then
        print_error "systemctl not found. This script requires systemd."
        return 1
    fi
    
    # Check if sudo is available
    if ! command -v sudo &> /dev/null; then
        print_error "sudo not found. This script requires sudo privileges."
        return 1
    fi
    
    # Check if we have sudo privileges
    if ! sudo -n true 2>/dev/null; then
        print_info "This script requires sudo privileges for systemctl operations."
        print_info "You may be prompted for your password."
    fi
    
    return 0
}

# Main function
main() {
    # Check prerequisites
    if ! check_prerequisites; then
        return 1
    fi
    
    # Parse arguments and execute command
    parse_args "$@"
}

# Run main function
main "$@"